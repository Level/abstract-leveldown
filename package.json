{
  "name": "abstract-leveldown",
  "description": "An abstract prototype matching the LevelDOWN API",
  "version": "0.1.0",
  "homepage": "https://github.com/rvagg/node-abstract-leveldown",
  "authors": [
    "Rod Vagg <rod@vagg.org> (https://github.com/rvagg)"
  ],
  "keywords": [
    "leveldb",
    "leveldown",
    "levelup"
  ],
  "main": "./abstract-leveldown.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/rvagg/node-abstract-leveldown.git"
  },
  "dependencies": {},
  "devDependencies": {
    "tap": "*",
    "sinon": "*",
    "rimraf": "*"
  },
  "scripts": {
    "test": "node ./test.js",
    "start": "beefy test.js"
  },
  "license": "MIT",
  "readme": "# Abstract LevelDOWN [![Build Status](https://secure.travis-ci.org/rvagg/node-abstract-leveldown.png)](http://travis-ci.org/rvagg/node-abstract-leveldown)\n\nAn abstract prototype matching the [LevelDOWN](https://github.com/rvagg/node-leveldown/) API. Useful for extending [LevelUP](https://github.com/rvagg/node-levelup) functionality by providing a replacement to LevelDOWN.\n\nAs of version 0.7, LevelUP allows you to pass a `'db'` option when you create a new instance. This will override the default LevelDOWN store with a LevelDOWN API compatible object.\n\n**Abstract LevelDOWN** provides a simple, operational *noop* base prototype that's ready for extending. By default, all operations have sensible \"noops\" (operations that essentially do nothing). For example, simple operations such as `.open(callback)` and `.close(callback)` will simply invoke the callback (on a *next tick*). More complex operations  perform sensible actions, for example: `.get(key, callback)` will always return a `'NotFound'` `Error` on the callback.\n\nYou add functionality by implementing the underscore versions of the operations. For example, to implement a `put()` operation you add a `_put()` method to your object. Each of these underscore methods override the default *noop* operations and are always provided with **consistent arguments**, regardless of what is passed in by the client.\n\nAdditionally, all methods provide argument checking and sensible defaults for optional arguments. All bad-argument errors are compatible with LevelDOWN (they pass the LevelDOWN method arguments tests). For example, if you call `.open()` without a callback argument you'll get an `Error('open() requires a callback argument')`. Where optional arguments are involved, your underscore methods will receive sensible defaults. A `.get(key, callback)` will pass through to a `._get(key, options, callback)` where the `options` argument is an empty object.\n\n## Example\n\nA simplistic in-memory LevelDOWN replacement\n\n```js\nvar util = require('util')\n  , AbstractLevelDOWN = require('./').AbstractLevelDOWN\n\n// constructor, passes through the 'location' argument to the AbstractLevelDOWN constructor\nfunction FakeLevelDOWN (location) {\n  AbstractLevelDOWN.call(this, location)\n}\n\n// our new prototype inherits from AbstractLevelDOWN\nutil.inherits(FakeLevelDOWN, AbstractLevelDOWN)\n\n// implement some methods\n\nFakeLevelDOWN.prototype._open = function (options, callback) {\n  // initialise a memory storage object\n  this._store = {}\n  // optional use of nextTick to be a nice async citizen\n  process.nextTick(function () { callback(null, this) }.bind(this))\n}\n\nFakeLevelDOWN.prototype._put = function (key, value, options, callback) {\n  key = '$' + key // safety, to avoid key='__proto__'-type skullduggery \n  this._store[key] = value\n  process.nextTick(callback)\n}\n\nFakeLevelDOWN.prototype._get = function (key, options, callback) {\n  var value = this._store['$' + key]\n  if (value === undefined) {\n    // 'NotFound' error, consistent with LevelDOWN API\n    return process.nextTick(function () { callback(new Error('NotFound')) })\n  }\n  process.nextTick(function () {\n    callback(null, value)\n  })\n}\n\nFakeLevelDOWN.prototype._del = function (key, options, callback) {\n  delete this._store['$' + key]\n  process.nextTick(callback)\n}\n\n// now use it in LevelUP\n\nvar levelup = require('levelup')\n\nvar db = levelup('/who/cares/', {\n  // the 'db' option replaces LevelDOWN\n  db: function (location) { return new FakeLevelDOWN(location) }\n})\n\ndb.put('foo', 'bar', function (err) {\n  if (err) throw err\n  db.get('foo', function (err, value) {\n    if (err) throw err\n    console.log('Got foo =', value)\n  })\n})\n```\n\nSee [MemDOWN](https://github.com/rvagg/node-mem/) if you are looking for a complete in-memory replacement for LevelDOWN.\n\n## Extensible API\n\nRemember that each of these methods, if you implement them, will receive exactly the number and order of arguments described. Optional arguments will be converted to sensible defaults.\n\n### AbstractLevelDOWN(location)\n### AbstractLevelDOWN#_open(options, callback)\n### AbstractLevelDOWN#_close(callback)\n### AbstractLevelDOWN#_get(key, options, callback)\n### AbstractLevelDOWN#_put(key, value, options, callback)\n### AbstractLevelDOWN#_del(key, options, callback)\n### AbstractLevelDOWN#_batch(array, options, callback)\n\nNote: At the time of writing, the LevelDOWN `batch()` API is in flux, see the 2.0-wip branch. If `batch()` is called without argument or with only an options object then it should return a `Batch` object with chainable methods. Otherwise it will invoke a classic batch operation.\n\n### AbstractLevelDOWN#_approximateSize(start, end, callback)\n### AbstractLevelDOWN#_iterator(options)\n\nBy default an `iterator()` operation returns a blank `AbstractIterator` object. The prototype is available on the main exports for you to extend. If you want to implement iterator operations then you should extend the `AbstractIterator` and return your object in the `_iterator(options)` method.\n\n`AbstractIterator` implements the basic state management found in LevelDOWN. It keeps track of when a `next()` is in progress and when an `end()` has been called so it doesn't allow concurrent `next()` calls, it does it allow `end()` while a `next()` is in progress and it doesn't allow either `next()` or `end()` after `end()` has been called.\n\n### AbstractIterator(db)\n\nProvided with the current instance of `AbstractLevelDOWN` by default.\n\n### AbstractIterator#_next(callback)\n### AbstractIterator#_end(callback)\n\n## Licence\n\nAbstract LevelDOWN is Copyright (c) 2013 Rod Vagg [@rvagg](https://twitter.com/rvagg) and licensed under the MIT licence. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details.",
  "readmeFilename": "README.md",
  "_id": "abstract-leveldown@0.1.0",
  "_from": "abstract-leveldown@*"
}
